/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package activity1;

//This is only basic calculator. It does 4 arithmetic calculations. It differs from scientific calculator, it is more complex than ordinary calculator.
//Division is still indevelopment. So far, no bugs.
//But kinda very complex.

import java.text.NumberFormat;
import java.util.Locale;

//THIS IS THE CALCULATOR I CAN BUILD. SCIENTIFIC CALCULATOR IS VERY COMPLEX THOUGH.
//DON'T JUST CREDIT YOURSELF OR STEAL THE CODE THAT IS NOT YOURS!! MUST STIL CREDIT THE OWNER.
/**
 *
 * @author PC
 *
 */
public class Activity1 extends javax.swing.JFrame {

    /**
     * Creates new form Activity1
     */
    public Activity1() {
  
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Calculator = new javax.swing.JPanel();
        screen = new javax.swing.JTextField();
        plus = new javax.swing.JButton();
        num1 = new javax.swing.JButton();
        num2 = new javax.swing.JButton();
        num3 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        num4 = new javax.swing.JButton();
        num5 = new javax.swing.JButton();
        num6 = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        num7 = new javax.swing.JButton();
        num8 = new javax.swing.JButton();
        num9 = new javax.swing.JButton();
        times = new javax.swing.JButton();
        period = new javax.swing.JButton();
        num0 = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        history = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Calculator"); // NOI18N

        Calculator.setBackground(new java.awt.Color(55, 55, 55));
        Calculator.setForeground(new java.awt.Color(255, 255, 255));
        Calculator.setLayout(null);

        screen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenActionPerformed(evt);
            }
        });
        screen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                screenKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                screenKeyTyped(evt);
            }
        });
        Calculator.add(screen);
        screen.setBounds(20, 30, 290, 50);

        plus.setBackground(new java.awt.Color(102, 102, 102));
        plus.setForeground(new java.awt.Color(255, 255, 255));
        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });
        Calculator.add(plus);
        plus.setBounds(240, 160, 50, 40);

        num1.setBackground(new java.awt.Color(102, 102, 102));
        num1.setForeground(new java.awt.Color(255, 255, 255));
        num1.setText("1");
        num1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num1ActionPerformed(evt);
            }
        });
        Calculator.add(num1);
        num1.setBounds(30, 160, 50, 40);

        num2.setBackground(new java.awt.Color(102, 102, 102));
        num2.setForeground(new java.awt.Color(255, 255, 255));
        num2.setText("2");
        num2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num2ActionPerformed(evt);
            }
        });
        Calculator.add(num2);
        num2.setBounds(100, 160, 50, 40);

        num3.setBackground(new java.awt.Color(102, 102, 102));
        num3.setForeground(new java.awt.Color(255, 255, 255));
        num3.setText("3");
        num3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num3ActionPerformed(evt);
            }
        });
        Calculator.add(num3);
        num3.setBounds(170, 160, 50, 40);

        clear.setBackground(new java.awt.Color(204, 0, 51));
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("C");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        Calculator.add(clear);
        clear.setBounds(240, 100, 50, 40);

        num4.setBackground(new java.awt.Color(102, 102, 102));
        num4.setForeground(new java.awt.Color(255, 255, 255));
        num4.setText("4");
        num4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num4ActionPerformed(evt);
            }
        });
        Calculator.add(num4);
        num4.setBounds(30, 230, 50, 40);

        num5.setBackground(new java.awt.Color(102, 102, 102));
        num5.setForeground(new java.awt.Color(255, 255, 255));
        num5.setText("5");
        num5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num5ActionPerformed(evt);
            }
        });
        Calculator.add(num5);
        num5.setBounds(100, 230, 50, 40);

        num6.setBackground(new java.awt.Color(102, 102, 102));
        num6.setForeground(new java.awt.Color(255, 255, 255));
        num6.setText("6");
        num6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num6ActionPerformed(evt);
            }
        });
        Calculator.add(num6);
        num6.setBounds(170, 230, 50, 40);

        minus.setBackground(new java.awt.Color(102, 102, 102));
        minus.setForeground(new java.awt.Color(255, 255, 255));
        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });
        Calculator.add(minus);
        minus.setBounds(240, 230, 50, 40);

        num7.setBackground(new java.awt.Color(102, 102, 102));
        num7.setForeground(new java.awt.Color(255, 255, 255));
        num7.setText("7");
        num7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num7ActionPerformed(evt);
            }
        });
        Calculator.add(num7);
        num7.setBounds(30, 300, 50, 40);

        num8.setBackground(new java.awt.Color(102, 102, 102));
        num8.setForeground(new java.awt.Color(255, 255, 255));
        num8.setText("8");
        num8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num8ActionPerformed(evt);
            }
        });
        Calculator.add(num8);
        num8.setBounds(100, 300, 50, 40);

        num9.setBackground(new java.awt.Color(102, 102, 102));
        num9.setForeground(new java.awt.Color(255, 255, 255));
        num9.setText("9");
        num9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num9ActionPerformed(evt);
            }
        });
        Calculator.add(num9);
        num9.setBounds(170, 300, 50, 40);

        times.setBackground(new java.awt.Color(102, 102, 102));
        times.setForeground(new java.awt.Color(255, 255, 255));
        times.setText("x");
        times.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesActionPerformed(evt);
            }
        });
        Calculator.add(times);
        times.setBounds(240, 300, 50, 40);

        period.setBackground(new java.awt.Color(102, 102, 102));
        period.setForeground(new java.awt.Color(255, 255, 255));
        period.setText(".");
        period.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodActionPerformed(evt);
            }
        });
        Calculator.add(period);
        period.setBounds(30, 370, 50, 40);

        num0.setBackground(new java.awt.Color(102, 102, 102));
        num0.setForeground(new java.awt.Color(255, 255, 255));
        num0.setText("0");
        num0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num0ActionPerformed(evt);
            }
        });
        Calculator.add(num0);
        num0.setBounds(100, 370, 50, 40);

        equals.setBackground(new java.awt.Color(51, 153, 255));
        equals.setForeground(new java.awt.Color(255, 255, 255));
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });
        Calculator.add(equals);
        equals.setBounds(170, 370, 50, 40);

        divide.setBackground(new java.awt.Color(102, 102, 102));
        divide.setForeground(new java.awt.Color(255, 255, 255));
        divide.setText("/");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });
        Calculator.add(divide);
        divide.setBounds(240, 370, 50, 40);

        history.setBackground(new java.awt.Color(255, 255, 255));
        history.setForeground(new java.awt.Color(255, 255, 255));
        Calculator.add(history);
        history.setBounds(30, 90, 150, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Calculator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Calculator, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void num8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num8ActionPerformed
        screen.setText(screen.getText() + "8");

// TODO add your handling code here:
    }//GEN-LAST:event_num8ActionPerformed

    private void screenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_screenActionPerformed

    private void num1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num1ActionPerformed

        screen.setText(screen.getText() + "1");

        // TODO add your handling code here:
    }//GEN-LAST:event_num1ActionPerformed

    private void num2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num2ActionPerformed
        // TODO add your handling code here:

        screen.setText(screen.getText() + "2");  
    }//GEN-LAST:event_num2ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed

        screen.setText("");
        history.setText("");
        
        this.dispose();
     new Activity1().setVisible(true);      
        // TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed

      
    if (max == 0){
            //stores first num. If not, subtraction, multiply, and divide operators will not work.
            //Temporary memory. Once firstnum is stored, it will no longer work.  
        double val = Double.parseDouble(screen.getText());
        firstnum=val;
        history.setText("");
        history.setText(history.getText()+val+"+"); //Basically a history.
        screen.setText("");//Clears once you clicked operators.
        
        max=2; //Storage for the executor.      

        method=calculator[0]; //calculator = {"+", "-", "/", "*"}, then zero. String method is used to store array in there.        
        }
        
    else if (max == 2){
            
      while (max <= maxexec){
            switch (method){//It rejects (addition operator) when not called.
         
                case "-" -> {
                         //if previous is addition and current is substraction then, subtracts. Adds the firstnum and secondnum before using subtraction.
                         //Formual for currrent operator.
                    double current = Double.parseDouble(screen.getText());
                    firstnum = firstnum - current;
                    duplicate = firstnum;
      
                    method=null; //Erases all the operators.
                    method=calculator[0]; //Then, addd the current operator. (Addition)
                                
                    history.setText(history.getText()+current+"+");
                    max=3;
                           
                    screen.setText("");
                     }
         
                case "*" -> {
                           //if previous is addition and current is subtraction then, multiplies. Adds the firstnum and secondnum before using multiplication.
                           //Formula for current operator.
                    double current = Double.parseDouble(screen.getText());
                    firstnum = firstnum * current;
                    duplicate = firstnum;
                    method=null;
                    method=calculator[0];
                                
                    history.setText(history.getText()+current+"+");
                    max=3;
                    screen.setText(""); 
                      }
                      
                case "/" -> {
                             //if previous is addition and current is substraction then, multiplies. Adds the firstnum and secondnum before using multiplication.
                           //Formula for current operator.
                    double current = Double.parseDouble(screen.getText());
                    firstnum = firstnum / current;
                    duplicate = firstnum;
     
                    method=null;
                    method=calculator[0];
                                
                 
                    history.setText(history.getText()+current+"+");
                    max=3;
                    screen.setText("");
                      }
   
                default -> {//default if previous operator is addition. If not, it will not execute.
                    double current = Double.parseDouble(screen.getText());
                    secondnum=current;
                    duplicate = firstnum+secondnum;
     
                    history.setText(history.getText()+current+"+");
                    screen.setText("");

                    max++;
                    method=calculator[0];
          
                      }
                    }
          //It rejects (addition operator) when not called.
               break;
                }
        }
        
        
    else if (max > 2){
      
       while (max <= maxexec){
          
        double current = Double.parseDouble(screen.getText());
        secondnum=current;
     
    
      switch (method){
         
                case "-":{
                    double val = Double.parseDouble(screen.getText());
                 
                    duplicate = duplicate - val;
                     
                    method=null;
                    method=calculator[0];
                     
                    history.setText(history.getText()+current+"+");
                    max++;
                    screen.setText("");
                    break;
                     }
                     
                case "*":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                    double val = Double.parseDouble(screen.getText());
 
                    duplicate = duplicate * val;
                    method=null;
                    method=calculator[0];

                    history.setText(history.getText()+current+"+");
                    max++;
                    screen.setText("");       
                    break;
                     
                      }
                case "/":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                    double val = Double.parseDouble(screen.getText());
                  
                      
                    duplicate = duplicate / val;
              
                    method=null;
                    method=calculator[0];
                    
                    history.setText(history.getText()+current+"+");
                    max++;
                    screen.setText("");
                    break;         
                      }
     
                default:{
                   duplicate = duplicate+secondnum;
     
                   history.setText(history.getText()+current+"+");
                    screen.setText("");

                    max++;

                   method=calculator[0];
                    }
              break;
                  }
            break; 
                }
     }
    }//GEN-LAST:event_plusActionPerformed

    private void num3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num3ActionPerformed
        screen.setText(screen.getText() + "3");
        // TODO add your handling code here:
    }//GEN-LAST:event_num3ActionPerformed

    private void num4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num4ActionPerformed
        screen.setText(screen.getText() + "4");
        // TODO add your handling code here:
    }//GEN-LAST:event_num4ActionPerformed

    private void num5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num5ActionPerformed
        screen.setText(screen.getText() + "5");
        // TODO add your handling code here:
    }//GEN-LAST:event_num5ActionPerformed

    private void num6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num6ActionPerformed
        screen.setText(screen.getText() + "6");
        // TODO add your handling code here:
    }//GEN-LAST:event_num6ActionPerformed

    private void num7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num7ActionPerformed
        screen.setText(screen.getText() + "7");
// TODO add your handling code here:
    }//GEN-LAST:event_num7ActionPerformed

    private void num9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num9ActionPerformed
        screen.setText(screen.getText() + "9");
    }//GEN-LAST:event_num9ActionPerformed

    private void num0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num0ActionPerformed
        screen.setText(screen.getText() + "0");
    }//GEN-LAST:event_num0ActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
//Restricts executions. The max is 24 exectutions. That's only the limit
//Act as the second to the last.
  
                secondnum = Double.parseDouble(screen.getText());

                history.setText(history.getText()+secondnum);
             
                         
    switch (max){       
         case 2: //Detects max.
         {
            while (max <=24){
                 switch (method){//nested switch
                     case "+":
                         second = firstnum+secondnum;
                         max=0;
                         method=null;
                         screen.setText(""+second);
                         break;
                         
                     case "-":
                         second = firstnum-secondnum;
                         screen.setText(""+second);
                         max=0;
                         method=null;
                         break;
                         
                     case "/":
                        second = firstnum/secondnum;
                        screen.setText(""+second);
                        max=0;
                        method=null;
                        break;
                         
                     case "*": 
                        second = firstnum*secondnum;
                        screen.setText(""+second);
                        max=0;
                        method=null;
                        break;

                     default:
                         max--;
                 }                 
             }
         break;
         }
         
         case 3:
         {
            while (max <=24){
                 switch (method){
                     case "+":
                        answer = duplicate+secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                     
                        case "-":  
                        answer = duplicate-secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                         
                     case "/":
                        answer = duplicate/secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                         
                     case "*": 
                        answer = duplicate*secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                    
                     default:
                         max--;
                 }   
             }
             break;
         }
       
          case 4:
         {
            while (max <=24){ 
                 switch (method){
                     case "+":
                        answer = duplicate+secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                     
                         case "-":
                        answer = duplicate-secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                         
                     case "/":
                        answer = duplicate/secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                         
                     case "*": 
                        answer = duplicate*secondnum;
                        screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;  
                     default:
                         max--;
                 }       
             }
             break;
         }
         
         case 5:
         {
             while (max <=24){  
                 switch (method){
                    
                     case "+":
                         answer = duplicate+secondnum;
                
                     
                    screen.setText(""+answer);
                        max=0;
                        method=null;
                        break;
                        
                     
                     case "-":
                             
                         answer = duplicate-secondnum;
                                screen.setText(""+answer);
                        max=0;
                        method=null;
                         break;
                         
                     case "/":
                       
                            answer = duplicate/secondnum;
                                   screen.setText(""+answer);
                         max=0;
                        method=null;
                         break;
                         
                     case "*": 
                      
                               answer = duplicate*secondnum;
                          screen.setText(""+answer);
                        max=0;
                        method=null;
                         break;
                    
                         
                     default:
                         max--;
                 }     
                 
             }
             break;
         
         }
        case 6:
       {
           
             while (max <=24){
                    
                 switch (method){
                    
                     case "+":
                         
                 
                      
                         answer = duplicate+secondnum;
                         
                         screen.setText(""+answer);
                         
                         
                         
                         max=0;
                        method=null;
                         
                         break;
                     
                         case "-":
                     
                             
                         answer = duplicate-secondnum;
                                screen.setText(""+answer);
                         max=0;
                        method=null;
                         break;
                         
                     case "/":
                       
                            answer = duplicate/secondnum;
                                   screen.setText(""+answer);
                         max=0;
                        method=null;
                         break;
                         
                     case "*": 
                      
                               answer = duplicate*secondnum;
                          screen.setText(""+answer);
                        max=0;
                        method=null;
                         break;
                    
                         
                     default:
                         max--;
                 }     
                 
             }
             break;
         
         
       }
      
       
     }

       //   if (firstnum > 0 && plus.getModel().isPressed()){
            
       // }
        //return;
        
    
           
        // TODO add your handling code here:
    }//GEN-LAST:event_equalsActionPerformed

    private void screenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_screenKeyPressed

      
    }//GEN-LAST:event_screenKeyPressed

    private void screenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_screenKeyTyped
        // TODO add your handling code here:

     // TODO add your handling code here:
       
    }//GEN-LAST:event_screenKeyTyped

    private void timesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesActionPerformed
      
   
        if (max == 0){

        double val = Double.parseDouble(screen.getText());
        firstnum=val;
        
        history.setText("");
        history.setText(history.getText()+val+"*");
        screen.setText("");
        
        max=2;      
        method=calculator[3];
        }
        
        
        else if (max == 2){
            
      while (max <= maxexec){
          
           switch (method){
         
                    case "-":{
                         //if previous operator is subtraction.
                        double current = Double.parseDouble(screen.getText());

                        firstnum = firstnum - current;
                        duplicate = firstnum;

                        history.setText(history.getText()+current+"*");
                         max=3;
                        screen.setText("");
                        method=null;
                        method=calculator[3];
                           break;
                     }
                      case "+":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        firstnum = firstnum + current;
                        duplicate = firstnum;
      
                      
                        history.setText(history.getText()+current+"*");
                        max=3;
                        screen.setText("");
                        method=null;
                        method=calculator[3];
                         break;
                     
                      }
                      case "/":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        firstnum = firstnum / current;
                        duplicate = firstnum;

                        history.setText(history.getText()+current+"+");
                        max=3;
                        screen.setText("");
                        method=null;
                        method=calculator[3];
                         break;
                      }
                    default:{
          
                       double current = Double.parseDouble(screen.getText());
                       secondnum=current;
              
                       duplicate = firstnum*secondnum;
                       history.setText(history.getText()+current+"*");
                       screen.setText("");
        
                       max++;
                       method=calculator[3];
                        }
                      break;
                       }
                    break;
                     }  
      
                    }   else if (max > 2){
            
      while (max <= maxexec){
          
        double val = Double.parseDouble(screen.getText());
        
        secondnum=val;
        
           switch (method){
         
                     case "-":{
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate - current;
                        method=null;
                        method=calculator[3];
           
                        history.setText(history.getText()+current+"*");
                        max++;
                        screen.setText("");
                        break;
                     }
                     
                      case "+":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate + current;

                        method=null;
                        method=calculator[3];

                        history.setText(history.getText()+current+"*");
                        max++;
                        screen.setText("");
                         break;
                     
                      }
                      case "/":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate / current;
                        method=null;
                        method=calculator[0];
                 
                        history.setText(history.getText()+current+"+");
                         max++;
                        screen.setText(""); 
                         break;
                    
                        
                      }
     
                      default:{
              
                        duplicate = duplicate*secondnum;
                        history.setText(history.getText()+cal+"*");
                        screen.setText("");
                        max++;
               
                        method=null;
                        method=calculator[3];

                        }
                    break;
                      }
                 break; 
                }
            }
 
    }//GEN-LAST:event_timesActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed

        if (max == 0){
            
        double val = Double.parseDouble(screen.getText());
        firstnum=val;
        history.setText("");
        history.setText(history.getText()+val+"-");
        screen.setText("");
        
        max=2;      
        method=calculator[1];

        } else if (max == 2){
            while (max <= maxexec){
                switch (method){
         
                     case "+":{
                         //if previous operator is addition.
                    double current = Double.parseDouble(screen.getText());
                    firstnum = firstnum + current;
                    duplicate = firstnum;
                    method=null;
                    method=calculator[1];
                    history.setText(history.getText()+current+"-");
                    max=3;
                     
                    screen.setText("");
                    break;
                     }
                     
                     case "*":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                    double current = Double.parseDouble(screen.getText());                      
                    firstnum = firstnum * current;
                    duplicate = firstnum;
                    method=null;
                    method=calculator[0];
                    
                    history.setText(history.getText()+current+"-");
                    max=3;
                    screen.setText("");
                    break;
                      }
                     case "/":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                    double current = Double.parseDouble(screen.getText());
                        firstnum = firstnum / current;
                        duplicate = firstnum;
                        method=null;
                        method=calculator[0];

                        history.setText(history.getText()+current+"-");
                        max=3;
                        screen.setText("");
                        break;
                      }
     
   
                     default:{
                       double val = Double.parseDouble(screen.getText());
                       secondnum=val;
                       duplicate = firstnum - secondnum;
     
                       history.setText(history.getText()+val+"-");
                       screen.setText("");
                       max++;

                       method=null;
                       method=calculator[1];
          
                     }
                    break;
                }
            break;
        }
 
        } else if (max > 2){
            
            while (max <= maxexec){
                       double val = Double.parseDouble(screen.getText());
                       secondnum=val;

                switch (method){
                     case "+":{
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate + current;
                        method=null;
                        method=calculator[1];
                    
                        history.setText(history.getText()+current+"-");
                        max++;
                        screen.setText("");
                        break;
                     }

                     case "*":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate * current;
                        method=null;
                        method=calculator[1];
                                   
                        history.setText(history.getText()+current+"-");
                        max++;
                        screen.setText("");
                        break;
                      }
                     
                      case "/":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        duplicate = duplicate / current;
       
                        method=null;
                        method=calculator[1];
                        history.setText(history.getText()+current+"-");
                        max++;
                        screen.setText("");
                        break;
                      }

                     default:{
                        duplicate = duplicate - secondnum;
                        history.setText(history.getText()+val+"-");
                        screen.setText("");
                        max++;
               
                        method=calculator[1];
                        }
                      break;
                }
            break;
        }
        }
    }//GEN-LAST:event_minusActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
//In order for it to work, must use switch cuz its the only way to solve second num and so on.
//Primary formula.
        
        //tiggers divide operator.
      
        if (max == 0){
        //first step before getting second number.
        double current = Double.parseDouble(screen.getText());
        firstnum=current;
        
        history.setText("");
        history.setText(history.getText()+current+"/");
        screen.setText("");
        
        max=2;      
       
        method=calculator[2];

        } else if (max == 2){
          //secondnumber  
      while (max <= maxexec){
            switch (method){
         
                     case "+":{
                         //if previous operator is addition.
                    double current = Double.parseDouble(screen.getText());
                    firstnum = firstnum + current;
                    duplicate = firstnum;

                    method=null;
                    method=calculator[2];
                                
                    history.setText(history.getText()+current+"/");
                    max=3;
                    screen.setText("");
                    break;
                     }
                     
                     
                     case "*":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                    double current = Double.parseDouble(screen.getText());
                      
                    firstnum = firstnum * current;
                         
                    duplicate = firstnum;
                    method=null;
                    method=calculator[2];
                               
                    history.setText(history.getText()+current+"/");
                    max=3;
                    screen.setText("");       
                    break;
                     
                    }
                      case "-":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                        double current = Double.parseDouble(screen.getText());
                        firstnum = firstnum - current;
                         
                        duplicate = firstnum;
                        method=null;
                        method=calculator[2];
                                
                        history.setText(history.getText()+current+"/");
                        max=3;
                        screen.setText("");
                           
                         break;
                    }
                     default:{ 
                       double current = Double.parseDouble(screen.getText());
                       secondnum=current;
              
                       duplicate = firstnum / secondnum;
     
                       history.setText(history.getText()+current+"/");
                       screen.setText("");
        
                       max++;
                       method=null;
                       method=calculator[2];
          
                }
                break;
                    }
               break;
                }
      
        } else if (max > 2){
       while (max <= maxexec){
          //continues loop.
          
                       double val = Double.parseDouble(screen.getText());
                       secondnum=val;

            switch (method){
                case "-":{
                    double current = Double.parseDouble(screen.getText());

                    duplicate = duplicate - current;
                     
                    method=null;
                    method=calculator[2];
                         
                    history.setText(history.getText()+current+"/");
                    max++;
                    screen.setText("");
                    break;
                     }
                     
                case "*":{
                            //if previous operator is multiplication. Then, multiplies the firstnum and secondnum before using addition.
                           //Formula for previous operator.
                    double current = Double.parseDouble(screen.getText());
              
                    duplicate = duplicate * current;
                    method=null;
                    method=calculator[2];
                                   
                    history.setText(history.getText()+current+"/");
                    max++;
                    screen.setText("");       
                    break;
                     
                      }
                case "+":{
                            //if previous operator is divide. Then, divides the firstnum and secondnum before using addition.
                            //Formula for previous operator.
                    double current = Double.parseDouble(screen.getText());

                    duplicate = duplicate + current;
              
                    method=null;
                    method=calculator[2];
                   
                    history.setText(history.getText()+current+"/");
                    max++;
                    screen.setText("");
                    break;         
                      }
        
                default:{
                    duplicate = duplicate / secondnum;
     
                    history.setText(history.getText()+val+"/");
                    screen.setText("");
                    max++;
                    method=calculator[2];
                    }
              break;
                 }
          break; 
            }
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_divideActionPerformed

    private void periodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periodActionPerformed
        // TODO add your handling code here:
     

        
     
    }//GEN-LAST:event_periodActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Activity1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Activity1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Activity1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Activity1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Activity1().setVisible(true);
            }
        });
    }
    double firstnum = 0;
    
    double secondnum = 0;
    
    
    double answer = 0;
    

    
    int maxexec = 24;
    int max=0;

    double duplicate = 0;
    
    
    String method;
    double second = 0;
    


    String [] calculator = {"+", "-", "/", "*"};
  
    int cal = calculator.length;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Calculator;
    private javax.swing.JButton clear;
    private javax.swing.JButton divide;
    private javax.swing.JButton equals;
    private javax.swing.JLabel history;
    private javax.swing.JButton minus;
    private javax.swing.JButton num0;
    private javax.swing.JButton num1;
    private javax.swing.JButton num2;
    private javax.swing.JButton num3;
    private javax.swing.JButton num4;
    private javax.swing.JButton num5;
    private javax.swing.JButton num6;
    private javax.swing.JButton num7;
    private javax.swing.JButton num8;
    private javax.swing.JButton num9;
    private javax.swing.JButton period;
    private javax.swing.JButton plus;
    private javax.swing.JTextField screen;
    private javax.swing.JButton times;
    // End of variables declaration//GEN-END:variables
}
